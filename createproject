#!/bin/bash
#    CreateProject
#    Bash script which creates a Template for a new project
#    command line example   = CreateProject Eicon DRD_Silo8 F427ZI
#    "CreateProject"        = Name of the Command
#    "Eicon"                = Name of the Board Manufacturer
#    "DRD_Silo8"            = Name of the DinRDuino board series
#    "F427ZI"               = Abreviated name of the Stm32 CPU the full name being STM32F427ZIT6
#    "STM32F427ZIT6"        = IC MCU 32BIT 2MB FLASH 144LQF
#    "STM32F427ZIT6"        = STM32 = ST Micro, F = Device, 427 = series, Z = 144 Pins, I = 2048 KB Mem, T = LQFP, 6 = Temp = -40 to 85*C.
echo "-------------------------------------------------------------------------------------------------"
GITHUB_USER_NAME=noeldiviney
GITHUB_ORGS_NAME=eiconDinRDuino
PROJECT_NAME=$2
BOARD_MANUFACTURER=$1
BOARD_SERIES="$(cut -d'_' -f1 <<<"$PROJECT_NAME")"
BOARD_APP="$(cut -d'_' -f2 <<<"$PROJECT_NAME")"
CPU_TYPE="$(cut -d'_' -f3 <<<"$PROJECT_NAME")"
CPU_DEVICE=${CPU_TYPE:0:4}
CPU_FAMILY=${CPU_TYPE:0:2}
CPU_PINS=${CPU_TYPE:4:1}
CPU_MEM=${CPU_TYPE:5:1}
X=x
XX=xx
if [ "$CPU_MEM" = "B" ]; then
	BOARD_TYPE=STM32$CPU_DEVICE$X$CPU_MEM
else
	BOARD_TYPE=STM32$CPU_DEVICE$XX
fi
MCU_FAMILY=STM32$CPU_FAMILY$XX
MCU_LINE=STM32$CPU_DEVICE$XX

echo "createproject    line $LINENO  GITHUB_USER_NAME            = $GITHUB_USER_NAME"   
echo "createproject    line $LINENO  GITHUB_ORGS_NAME            = $GITHUB_ORGS_NAME"
echo "createproject    line $LINENO  PROJECT_NAME                = $PROJECT_NAME"
echo "createproject    line $LINENO  BOARD_MANUFACTURER          = $BOARD_MANUFACTURER"
echo "createproject    line $LINENO  BOARD_SERIES                = $BOARD_SERIES"
echo "createproject    line $LINENO  BOARD_APP                   = $BOARD_APP"
echo "createproject    line $LINENO  CPU_TYPE                    = $CPU_TYPE"
echo "createproject    line $LINENO  CPU_DEVICE                  = $CPU_DEVICE"
echo "createproject    line $LINENO  CPU_FAMILY                  = $CPU_FAMILY"
echo "createproject    line $LINENO  CPU_PINS                    = $CPU_PINS"
echo "createproject    line $LINENO  CPU_MEM                     = $CPU_MEM"
echo "createproject    line $LINENO  X                           = $X"
echo "createproject    line $LINENO  XX                          = $XX"
echo "createproject    line $LINENO  BOARD_TYPE                  = $BOARD_TYPE"
echo "createproject    line $LINENO  MCU_FAMILY                  = $MCU_FAMILY"
echo "createproject    line $LINENO  MCU_LINE                    = $MCU_LINE"
echo "-------------------------------------------------------------------------------------------------"
echo "createproject    line $LINENO  Creating local Git Repo for   $PROJECT_NAME"
echo ""
echo "createproject    line $LINENO  mkdir                         $PROJECT_NAME"
echo "createproject    line $LINENO  cd                            $PROJECT_NAME"
echo "createproject    line $LINENO  PWD                         = $PWD"
echo "createproject    line $LINENO  Downloading Template          wget https://github.com/eiconDinRDuino/BlinkTempl/raw/master/BlinkTempl.tar.bz2"
echo ""
echo "createproject    line $LINENO  wget download info"
echo "-------------------------------------------------------------------------------------------------"
mkdir -p $PROJECT_NAME
cd $PROJECT_NAME
wget https://github.com/eiconDinRDuino/ProjectTempl/raw/master/project.tar.bz2

echo "-------------------------------------------------------------------------------------------------"
echo "createproject    line $LINENO  Extracting the tarball        tar -xvjf project.tar.bz2"
tar -xvjf project.tar.bz2
sed -i 's/app/Blink/g' project.cpp
sed -i 's/app/Blink/g' app.cpp
sed -i 's/app/Blink/g' app.h
mv project.cpp $PROJECT_NAME.cpp
mv project.ino $PROJECT_NAME.ino
mv app.cpp $BOARD_APP.cpp
mv app.h $BOARD_APP.h
declare -u BOARD_APP_UC
BOARD_APP_UC=$BOARD_APP
sed -i "s/APP/$BOARD_APP_UC/g" $BOARD_APP.h


echo "createproject    line $LINENO  Renaming project.cpp            mv project.cpp $PROJECT_NAME.cpp"
echo "createproject    line $LINENO  Renaming project.ino            mv ptoject.ino $PROJECT_NAME.ino"
echo "createproject    line $LINENO  Renaming app.cpp                mv app.cpp $BOARD_APP.cpp"
echo "createproject    line $LINENO  Renaming app.h                  mv app.h $BOARD_APP.h"
echo "createproject    line $LINENO  Edit using sed                  $PROJECT_NAME.cpp $BOARD_APP.cpp $BOARD_APP.h"
#exit
echo "-------------------------------------------------------------------------------------------------"
echo "createproject    line $LINENO  Creating                      CMakeLists.txt"
#exit
if [ -f CMakeLists.txt ]; then
   rm -rf CMakeLists.txt
   touch CMakeLists.txt
else
   touch CMakeLists.txt
fi 
echo "SET(CCLL CMAKE_CURRENT_LIST_LINE)" >> CMakeLists.txt
echo "string(SUBSTRING \${CMAKE_CURRENT_SOURCE_DIR} 5 1 DRV)" >> CMakeLists.txt
echo "string(TOLOWER \"\${DRV}\" DRV)" >> CMakeLists.txt
echo "Message(STATUS \"CWD = \${CMAKE_CURRENT_SOURCE_DIR} \")" >> CMakeLists.txt
echo "MESSAGE(STATUS \"DRV = \${DRV}\")" >> CMakeLists.txt
echo "cmake_minimum_required(VERSION 3.6)" >> CMakeLists.txt
echo "set(BOARD_MANUFACTURER $BOARD_MANUFACTURER)" >> CMakeLists.txt
echo "set(BOARD_TYPE $BOARD_TYPE)" >> CMakeLists.txt

echo "set(BOARD_VARIANT $BOARD_SERIES_$BOARD_APP_$CPU_DEVICE$CPU_PINS$CPU_MEM)" >> CMakeLists.txt

echo "set(SKETCH_NAME $PROJECT_NAME)" >> CMakeLists.txt
echo "set(PRJ_NAME $PROJECT_NAME)" >> CMakeLists.txt
echo "set(MCU_FAMILY $MCU_FAMILY)" >> CMakeLists.txt
echo "set(MCU_FAMILY_LC stm32f4xx)" >> CMakeLists.txt
echo "set(MCU_LINE $MCU_LINE)" >> CMakeLists.txt
echo "set(EICON_BOARD $PROJECT_NAME)" >> CMakeLists.txt
echo "set(MCU_LINKER_SCRIPT /mnt/\${DRV}/Arduino/hardware/$BOARD_MANUFACTURER/stm32/variants/$PROJECT_NAME/ldscript.ld)" >> CMakeLists.txt
echo "set(ARDUINO_VERSION 10809)" >> CMakeLists.txt
echo "#return()" >> CMakeLists.txt
echo "include("CMake/Message-1.cmake")" >> CMakeLists.txt
echo "include("CMake/STM32Toolchain.cmake")" >> CMakeLists.txt
echo "include("CMake/ArduinoStm32Lib.cmake")" >> CMakeLists.txt
echo "include("CMake/Message-2.cmake")" >> CMakeLists.txt

echo "project(\${PRJ_NAME} C CXX ASM)" >> CMakeLists.txt
echo "add_library(arduinolib \${ARDUINOLIB_SOURCES})" >> CMakeLists.txt
echo "add_executable(\${PRJ_NAME}.elf \${SKETCH_CPP_SOURCES})" >> CMakeLists.txt
echo "target_link_libraries(\${PRJ_NAME}.elf arduinolib)" >> CMakeLists.txt 
echo "set(CMAKE_EXE_LINKER_FLAGS "-Wl,-Map=\${PROJECT_SOURCE_DIR}/build/\${PRJ_NAME}.map")" >> CMakeLists.txt
echo "set(HEX_FILE \${PROJECT_SOURCE_DIR}/build/\${PRJ_NAME}.hex)" >> CMakeLists.txt
echo "set(BIN_FILE \${PROJECT_SOURCE_DIR}/build/\${PRJ_NAME}.bin)" >> CMakeLists.txt

echo "include("CMake/Message-3.cmake")" >> CMakeLists.txt

echo "add_custom_command(TARGET ${PROJECT_NAME}.elf POST_BUILD" >> CMakeLists.txt
echo "        COMMAND \${CMAKE_OBJCOPY} ARGS -Oihex \$<TARGET_FILE:\${PRJ_NAME}.elf> \${HEX_FILE}" >> CMakeLists.txt
echo "        COMMAND \${CMAKE_OBJCOPY} ARGS -Obinary \$<TARGET_FILE:\${PRJ_NAME}.elf> \${BIN_FILE}" >> CMakeLists.txt
echo "COMMENT \"Building \${HEX_FILE} \\nBuilding \${BIN_FILE}\")" >> CMakeLists.txt
echo "include("CMake/Message-4.cmake")" >> CMakeLists.txt
echo "MESSAGE(STATUS "End of CMakeLists.txt")" >> CMakeLists.txt
echo "CMakeLists.txt created"
echo ""
echo "-------------------------------------------------------------------------------------------------"
echo ""
echo "Creating Github repo for USER $GITHUB_USER_NAME in ORGS $GITHUB_ORGS_NAME and PROJECT_NAME = $PROJECT_NAME"
mkdir build
git init
#curl -u "$GITHUB_USER_NAME" https://api.github.com/orgs/$GITHUB_ORGS_NAME/repos `{"name" : "$PROJECT_NAME"}`
echo "cmd = curl -u \"$GITHUB_USER_NAME\" https://api.github.com/orgs/$GITHUB_ORGS_NAME/repos -d "{\"name\":\"${PROJECT_NAME}\"}""
curl -u "$GITHUB_USER_NAME" https://api.github.com/orgs/$GITHUB_ORGS_NAME/repos -d "{\"name\":\"${PROJECT_NAME}\"}"

#exit
git add build CMake/ CMakeLists.txt ${PROJECT_NAME}.cpp ${PROJECT_NAME}.ino README.adoc
git commit -m "initial commit"
git remote add origin https://github.com/eiconDinRDuino/${PROJECT_NAME}.git
git push -u origin master

echo"\n"
echo "Doing a CMake Build"
echo "PWD = $PWD"
echo "cd $PROJECT_NAME/build"
cd build

echo "rm -rf * && cmake -G "Unix Makefiles" .."
rm -rf * && cmake -G "Unix Makefiles" ..
echo "Executing make"
make
echo "all done"

